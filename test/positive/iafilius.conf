#
# ferm config file
#
# Ferm is created by: Auke Kok <koka@geo.vu.nl>
# Found on: http://www.geo.vu.nl/~koka/ferm/
#
# This Ferm Config file is created: by Arjan Filius <iafilius@xs4all.nl> 22/05/2001
# Starting point was an example file provided with the ferm distribution
# This file may be used as an example and inspiration.
# Note the DOS attack filters in the IN_tcp and TCPACCEPT chains.
# TODO: udp and icmp rate limit, optimize for optimal path/speed
# Note: enhancements are welkome



option iptables
option clearall
option createchains

# predefined variables
set PPP_IFS "ppp0,ppp1,ppp2,ppp3,ppp4"
set ETH_IFS "eth0,eth1,eth2,eth3,eth4,eth5,eth6"
set TUN_IFS "tunl0,tunl1,tunl2,tunl3"

set MASQUERADED_NWS "192.168.0.0/24,192.168.1.0/24"

set IANA_RESERVED "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,224.0.0.0/3,240.0.0.0/5,0.0.0.0/8,1.0.0.0/8,2.0.0.0/8,5.0.0.0/8,7.0.0.0/8,23.0.0.0/8,27.0.0.0/8,31.0.0.0/8,36.0.0.0/8,37.0.0.0/8,39.0.0.0/8,41.0.0.0/8,42.0.0.0/8,49.0.0.0/8,50.0.0.0/8,58.0.0.0/7,60.0.0.0/8,67.0.0.0/8,68.0.0.0/6,72.0.0.0/5,80.0.0.0/4,96.0.0.0/3,127.0.0.0/8,169.254.0.0/16,192.0.2.0/24,197.0.0.0/8,218.0.0.0/7,220.0.0.0/6"

# Level 0 = interface level
# Level 1 = ip level
# Level 2 = tcp/ip level

# Begin chain tree (level 0) (built-in chains)


# There are 3 tables: filter, nat, mangle

table filter {


# built-in chain

    chain INPUT policy DROP {
	interface %PPP_IFS goto ppp0_IN;

	interface %ETH_IFS goto eth0_IN;

	interface %TUN_IFS goto tunl0_IN;

	interface lo goto lo_IN;

	interface dummy0 goto dummy0_IN;

	# Catch configuration errors
	logprefix "Undefined INterface (tf) " LOG;
	DROP;

    }

# built-in chain

    chain OUTPUT policy DROP {
	outerface %PPP_IFS goto ppp0_OUT;

	outerface %ETH_IFS goto eth0_OUT;

	outerface %TUN_IFS goto tunl0_OUT;

	outerface lo goto lo_OUT;

	outerface dummy0 goto dummy0_OUT;

	# Catch configuration errors
	logprefix "Undefined OUTerface (tf) " LOG;
	DROP;
    }


# built-in chain

    chain FORWARD policy DROP {
	
	# Forward traffic, and MASQ in ppp0
	interface eth0 outerface ppp0 saddr %MASQUERADED_NWS 
		proto tcp {
			dport (ftp-data ftp ssh smtp) sport 1024: {
				 state ( ESTABLISHED RELATED ) ACCEPT;
				syn ACCEPT;
			}
		state ( RELATED ) ACCEPT;
		logprefix "Refuse to FORWARD (tf) " LOG;
		REJECT;
		}


	# Allow de-MASQ-ed return traffic
	interface ppp0 outerface eth0 daddr %MASQUERADED_NWS
	{ 
		proto tcp { 
			 state INVALID REJECT; 
			 state ( ESTABLISHED RELATED ) ACCEPT;
		}
		 state ( RELATED ) ACCEPT;
	  	logprefix "Refuse to FORWARD (tf) " LOG;
	  	DROP;
	 }



	# Catch configuration errors
	logprefix "Refuse to FORWARD (tf) " LOG;
	DROP;
    }





# Bind an interrface to a policy (DMZ/INET/LAN)
# Level 1
chain ppp0_IN {

	# Refuse addresses defined as reserved by the IANA
	goto ppp0_check_in;

	protocol tcp goto INETIN_tcp;
	protocol udp goto INETIN_udp;
	protocol icmp goto INETIN_icmp;
	

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

chain ppp0_OUT {

	# Refuse addresses defined as reserved by the IANA
	goto ppp0_check_out;

	protocol tcp goto INETOUT_tcp;
	protocol udp goto INETOUT_udp;
	protocol icmp goto INETOUT_icmp;
	
	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

# Level 1
chain eth0_IN {

	# Check for known MAC's refuse rest
	goto eth0_mac_in;

	# Refuse addresses defined as reserved by the IANA
	goto eth0_check_in;

	protocol tcp goto LANIN_tcp;
	protocol udp goto LANIN_udp;
	protocol icmp goto LANIN_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

chain eth0_OUT {

	# Refuse addresses defined as reserved by the IANA
	goto eth0_check_out;

	protocol tcp goto LANOUT_tcp;
	protocol udp goto LANOUT_udp;
	protocol icmp goto LANOUT_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

# Level 1
chain dummy0_IN {

	# Check for known MAC's refuse rest
	#goto eth0_mac_in;

	# Refuse addresses defined as reserved by the IANA
	goto eth0_check_in;

	protocol tcp goto LANIN_tcp;
	protocol udp goto LANIN_udp;
	protocol icmp goto LANIN_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

chain dummy0_OUT {

	# Refuse addresses defined as reserved by the IANA
	goto eth0_check_out;

	protocol tcp goto LANOUT_tcp;
	protocol udp goto LANOUT_udp;
	protocol icmp goto LANOUT_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

# Level 1
chain lo_IN {

	# Check for known MAC's refuse rest
	#goto eth0_mac_in;

	# Refuse addresses defined as reserved by the IANA
	# icmp locally generated messages _are_  going via "lo" !
	# src and dst are real IP numbers from the interface the message was
	# issued on.
	# With that knowlage we must check icmp before _check_

	#protocol icmp goto LOIN_icmp;
	#goto lo_check_in;

	protocol tcp goto LOIN_tcp;
	protocol udp goto LOIN_udp;
	protocol icmp goto LOIN_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

chain lo_OUT {

	# Refuse addresses defined as reserved by the IANA
	# icmp locally generated messages _are_  going via "lo" !
	# src and dst are real IP numbers from the interface the message was
	# issued on.
	# With that knowlage we must check icmp before _check_

	#protocol icmp goto LOOUT_icmp;
	#goto lo_check_out;

	protocol tcp goto LOOUT_tcp;
	protocol udp goto LOOUT_udp;
	protocol icmp goto LOOUT_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}





# Level 1
chain tunl0_IN {

	# Refuse addresses defined as reserved by the IANA
	goto tunl0_check_in;

	protocol tcp goto DMZIN_tcp;
	protocol udp goto DMZIN_udp;
	protocol icmp goto DMZIN_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}

chain tunl0_OUT {

	# Refuse addresses defined as reserved by the IANA
	goto tunl0_check_out;

	protocol tcp goto DMZOUT_tcp;
	protocol udp goto DMZOUT_udp;
	protocol icmp goto DMZOUT_icmp;

	# Catch configuration errors
	logprefix "Undefined protocol (tf) " LOG;
	DROP;
}



chain ppp0_check_in {

	# Pepperstream dialin
	saddr 192.168.254.0/24 daddr 192.168.254.0/24 RETURN;

	# Refuse addresses defined as reserved by the IANA
    	saddr %IANA_RESERVED goto LREJECT;
	daddr %IANA_RESERVED goto LREJECT;

	RETURN;
}

chain ppp0_check_out {

	# Pepperstream dialin
	saddr 192.168.254.0/24 daddr 192.168.254.0/24 RETURN;

	# Refuse addresses defined as reserved by the IANA
        saddr %IANA_RESERVED goto LREJECT;
        daddr %IANA_RESERVED goto LREJECT;

	RETURN;
}

chain eth0_check_in {

	# Refuse addresses defined as reserved by the IANA
        saddr %IANA_RESERVED goto LREJECT;
        daddr %IANA_RESERVED goto LREJECT;

	RETURN;
}

chain eth0_check_out {

	# Refuse addresses defined as reserved by the IANA
        saddr %IANA_RESERVED goto LREJECT;
        daddr %IANA_RESERVED goto LREJECT;

	RETURN;
}


chain lo_check_in {

	saddr 127.0.0.0/8 daddr 127.0.0.0/8  RETURN;

	goto LDROP;
}

chain lo_check_out {

	saddr 127.0.0.0/8 daddr 127.0.0.0/8  RETURN;

	goto LDROP;

}


chain tunl0_check_in {

	# Refuse addresses defined as reserved by the IANA
        saddr %IANA_RESERVED goto LREJECT;
        daddr %IANA_RESERVED goto LREJECT;

	RETURN;
}

chain tunl0_check_out {

	# Refuse addresses defined as reserved by the IANA
        saddr %IANA_RESERVED goto LREJECT;
        daddr %IANA_RESERVED goto LREJECT;

	RETURN;
}

chain eth0_mac_in {

	# Sabine / Optical Gigabit
	interface eth0  mac 00:60:08:F6:18:E9 RETURN;

	# Sjoerd optical Gigabit
	#interface eth0  mac 00:60:08:f6:1d:5b RETURN;

	#interface eth0  mac 00:60:08:F6:18:E9 RETURN;
	#interface eth0  mac 00:60:08:F6:18:E9 RETURN;

	limit 10/s logprefix "MAC unknown INTRUDERS?? (tf) " LOG;
	DROP;
}

# it's not possible to check your own mac for now.
chain eth0_mac_out {
	 limit 10/s logprefix "Configuratoin ERROR (tf) " LOG;
	DROP;
}


# "TCP" level

# Chain level 2
    chain INETIN_tcp {

	proto tcp {

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

#	    saddr (
#	     bad.guy1.com bad.hacker.org
#	    ) REJECT;

	     state INVALID REJECT;

	     state NEW {

		# accept new connections at predefined maximum rate
	        dport (
			smtp	# demo open port on internet
	    	) syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "INET SYN attack " LOG;
			limit 9999 burst 9999 DROP;	# ugly way to "disable" limit
		      }

	    	# Speedup auth, do not remove!
	    	dport auth syn {
			limit 5/sec burst 10 goto LREJECT;
			limit 1/sec burst 2 log-level warn logprefix "INET SYN attack " LOG;
			limit 9999 burst 9999 DROP;     # ugly way to "disable" limit
		}

	    }


	   # default
	    limit 2/s logprefix "INET DROP TCP " LOG;
	   DROP;
	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain INETOUT_tcp {
#	proto tcp if (ppp0) goto tosqueue;
	proto tcp {

	    # 6667/irc
	    # Only User squid may go to http and https
	    dport (
		http https
	    	) sport 1024: {
			 {
				uid-owner squid state NEW syn goto TCPACCEPT;
				uid-owner squid state ESTABLISHED ACCEPT; 
				}
			 uid-owner squid REJECT;
			 uid-owner root tcp-flags (SYN,ACK,RST) (ACK,RST) ACCEPT; 
			 uid-owner root ACCEPT; 
			 uid-owner arjan ACCEPT;
			 pid-owner 1 ACCEPT; 	# Accept init
			log-tcp-options logprefix "INETOUT Invalid User " LOG;
#			REJECT reject-with icmp-host-prohibited;
			REJECT reject-with icmp-port-unreachable;
	    }


	     state NEW {

		# 6667/irc
	    	dport (
		 ftp smtp time finger pop3 imap 993 6667
	    	) sport 1024: syn goto TCPACCEPT;

	    	dport ssh sport (
	    	 513:1023 1024:
	    	) syn goto TCPACCEPT;

	   	dport domain sport (
	    	 domain 1024:
	    	) syn goto TCPACCEPT;

		# dport netbios-ssn sport (
		#  netbios-ssn 1024:
		# )  syn goto TCPACCEPT;           

		# saddr (
		#  192.168.0.5
		# ) dport 113 sport 1024: syn goto TCPACCEPT;


	    	# Catch auth, do not remove!
	    	sport auth goto LREJECT;
	    }

	     state INVALID REJECT;

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	    # default
 	     limit 2/s logprefix "INETOUT REJECT TCP " LOG;
	    REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

chain INETIN_udp {
	proto udp {

#	    saddr (
#	     bad.guy1.com bad.hacker.org
#	    ) REJECT;

	     state INVALID REJECT;

#	    dport (
#		6112 6119 4000
#	    ) goto UDPACCEPT;
#	    sport 53 saddr (
#		ns1.domain.com ns2.domain.com
#	    ) goto UDPACCEPT;

	     state (
	     ESTABLISHED RELATED
 	    ) ACCEPT;

	   # default
 	     limit 2/s logprefix "INETIN DROP UDP " LOG;
	    DROP;
	}


	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain INETOUT_udp {

	proto udp {

		# Accept known sessions (and return traffic)
		 state (
		    ESTABLISHED RELATED
		) ACCEPT;

		 state NEW {

			# Allow DNS outgoing requests
			sport ( 53 1024: ) dport 53 goto UDPACCEPT;

			# Allow "time/37" squid/icpv2 outgoing requests
			sport ( 1024: ) dport ( time icpv2 ) goto UDPACCEPT;

		}

		# default
 	    	 limit 2/s logprefix "INETOUT REJECT UDP " LOG;
	    	REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

chain INETIN_icmp {
#	saddr (
#	    bad.guy1.com bad.hacker.org
#	) REJECT;


        proto icmp {
 	  state INVALID REJECT;

	  limit 10/s icmptype (
	   # Use 'iptables -p icmp -h' for possible options
#	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded               
	 ) {
		 limit 10/s ACCEPT;
		 limit 2/s logprefix "INETIN ICMP rate to high " LOG;
		DROP;
	   }

	 # default
    	 limit 2/s logprefix "INETIN DROP ICMP " LOG;
    	DROP;


	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain INETOUT_icmp {
        proto icmp {
	   limit 10/s icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded               
	  ) ACCEPT;

	  # default
     	   limit 2/s logprefix "INETOUT REJECT ICMP " LOG;
    	  REJECT;
	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }



# Chain level 2
    chain DMZIN_tcp {

	proto tcp {

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	     state INVALID REJECT;

#	    saddr (
#	      bad.guy1.com bad.hacker.org
#	    ) REJECT;


	     state NEW {
		# dport (
		#  22 25 80 110 443 3333 6667
		# ) goto TCPACCEPT;

		# Accept client DNS zone transfers
		dport domain sport ( 
			domain 1024: 
		) syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "DMZ SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
		}

		# Speedup auth, do not remove!
	    	dport auth sport 1024: syn {
			limit 5/sec burst 10 goto LREJECT;
			limit 1/sec burst 2 log-level warn logprefix "DMZ SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
		}

	    }


	    # default
    	     limit 2/s logprefix "DMZIN REJECT TCP " LOG;
    	    REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain DMZOUT_tcp {
	proto tcp {


	     state NEW {

	     dport (
		 http https
	     ) sport 1024: syn goto TCPACCEPT;

	     dport ssh sport (
	    	513:1023 1024:
	     ) syn goto TCPACCEPT;

#	     dport 53 sport (
#	    	53 1024:
#	     ) syn goto TCPACCEPT;

#            dport netbios-ssn sport (
#                netbios-ssn 1024:
#            )  syn goto TCPACCEPT;           

#	     saddr (
#		192.168.0.5
#	     ) dport 113 sport 1024: syn goto TCPACCEPT;

	     # Catch auth, do not remove!
	     sport auth goto LREJECT;
	    }


	     state INVALID REJECT;

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	    # default
    	     limit 2/s logprefix "DMZOUT REJECT TCP " LOG;
    	    REJECT;
	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;

    }
# Chain level 2
    chain DMZIN_udp {
	proto udp {

#	    saddr (
#	     bad.guy1.com bad.hacker.org
#	    ) REJECT;

	     state INVALID REJECT;

	     state NEW {

		# Accept incoming domain requests
		dport domain sport (
	    		domain 1024:
	    	) goto UDPACCEPT;

	    }

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	    # default
	    goto LREJECT;
    	     limit 2/s logprefix "DMZIN REJECT ICMP " LOG;
    	    REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;

    }

    chain DMZOUT_udp {
	proto udp {

		# Accept known sessions (return traffic)
		 state (
		    ESTABLISHED RELATED
		) ACCEPT;

		
		 state NEW {

			# Allow DNS outgoing requests
			sport ( 53 1024: ) dport 53 goto UDPACCEPT;
		}

		# Allow "time/37" outgoing requests
		#proto udp sport ( 1024: ) dport time goto UDPACCEPT;


		# default
		goto LREJECT;
    		 limit 2/s logprefix "DMZOUT REJECT UDP " LOG;
    		REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;

    }
# Chain level 2
    chain DMZIN_icmp {


        proto icmp  { 
#	 saddr (
#	    bad.guy1.com bad.hacker.org
#	 ) REJECT;

	  state INVALID REJECT;

         icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded
	 )  {
		 limit 10/s ACCEPT;
		 limit 2/s logprefix "DMZ ICMP rate to high " LOG;
		REJECT;
	    }

	  state (
	    ESTABLISHED RELATED
	 ) ACCEPT;

	 # default
	 limit 2/s logprefix "DMZIN REJECT ICMP " LOG;
	REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;

    }

    chain DMZOUT_icmp {
        proto icmp {
	   limit 10/s icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded               
	  ) ACCEPT;

	  goto LREJECT;
	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }


# chain level 2
    chain LANIN_tcp {
	proto tcp {
	    #	saddr (
	    #	 bad.guy1.com bad.hacker.org
	    #	) REJECT;

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	     state INVALID REJECT;

	     state NEW {


		# smtp/25 time/37 http/80 pop3/110 https/443
	    	dport (
		 smtp time http pop3 https
	    	) sport 1024: syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "LAN SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
		}

		# ssh/22
	    	dport ssh sport (
	    	 513:1023 1024:
	    	)  syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "LAN SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
		       }


		# domain/53
	    	limit 1/sec burst 2 dport domain sport (
	    	 domain 1024:
	    	) syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "LAN SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
		      }


		# netbios-ssn/139
	    	dport netbios-ssn sport (
	    	 netbios-ssn 1024:
	    	) syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "LAN SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
		      }


		# ftp/21 auth/113
	   	saddr (
		 192.168.0.3 192.168.1.2 192.168.1.103
	    	) dport ( ftp auth ) sport 1024: syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "LAN SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
			}

		# auth/113
		# Speedup auth, do not remove!
	    	dport auth sport 1024: syn {
			limit 5/sec burst 10 goto LREJECT;
			limit 1/sec burst 2 log-level warn logprefix "LAN SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
			}

	    }

	   # default
    	    limit 2/s logprefix "LANIN REJECT TCP " LOG;
    	   REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain LANOUT_tcp {

	proto tcp {

	     state NEW {
	    	dport (
		 ftp smtp time http imap https
	    	) sport 1024: syn goto TCPACCEPT;

	    	dport ssh sport (
	    	 513:1023 1024:
	    	) syn goto TCPACCEPT;

	    	dport domain sport (
	    	 domain 1024:
	    	) syn goto TCPACCEPT;

            	dport netbios-ssn sport (
                 netbios-ssn 1024:
            	) syn goto TCPACCEPT;           
	
		# Allow telnet to packet network
	    	dport telnet daddr 27.0.0.0/8 sport 1024: syn goto TCPACCEPT;

	    	saddr (
		 192.168.0.5
	    	) dport auth sport 1024: syn goto TCPACCEPT;

	    	daddr (
		 192.168.0.3 192.168.1.2 192.168.1.103
	    	) dport 1024: sport ( ftp ftp-data ) syn goto TCPACCEPT;


		# Catch auth, do not remove!
	   	sport auth goto LREJECT;
	   }

	    state INVALID REJECT;

	    state (
	    ESTABLISHED RELATED
	   ) ACCEPT;

	   # default
    	    limit 2/s logprefix "LANOUT REJECT TCP " LOG;
    	   REJECT;


	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

# chain level 2
    chain LANIN_udp {


	proto udp {

#	    saddr (
#		bad.guy1.com bad.hacker.org
#	    ) REJECT;

  	     state INVALID REJECT;

	    state NEW {

		# Accept SNMP-traps
	    	dport snmptrap sport 1024: saddr 192.168.0.3 goto UDPACCEPT;

		# Accept syslog
	    	dport syslog sport syslog saddr 192.168.0.3 goto UDPACCEPT;

		# netbios-ns/137 netbios-dgm/138
	    	sport netbios-ns dport netbios-ns goto UDPACCEPT;
	    	sport netbios-dgm dport netbios-dgm goto UDPACCEPT;

		# Allow incoming DNS requests
	    	dport domain sport ( domain 1024: ) goto UDPACCEPT;
	    }

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	    # default
    	     limit 2/s logprefix "LANIN REJECT UDP " LOG;
    	    REJECT;

        }


	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;

    }

    chain LANOUT_udp {
	proto udp {

  	    	 state INVALID REJECT;

		# Accept known sessions (return traffic)
		 state (
		    ESTABLISHED RELATED
		) ACCEPT;

		 state NEW {
			# Allow DNS outgoing requests
			#sport ( 53 1024: ) dport 53 goto UDPACCEPT;

			# Allow "time/37", squid/icpv2 outgoing requests
			sport ( 1024: ) dport ( time icpv2 ) goto UDPACCEPT;

			# netbios-ns/137 netbios-dgm/138
			sport netbios-ns dport netbios-ns goto UDPACCEPT;
	    		sport netbios-dgm dport netbios-dgm goto UDPACCEPT;



		}

		# default
    		 limit 2/s logprefix "LANOUT REJECT UDP " LOG;
    		REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

# chain level 2
    chain LANIN_icmp {

        proto icmp {

#	 saddr (
#	    bad.guy1.com bad.hacker.org
#	 ) REJECT;

	  state INVALID REJECT;

	 icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded               
	 ) {
		 limit 10/s ACCEPT;
		 limit 2/s logprefix "LANIN ICMP rate to high " LOG;
		REJECT;
	   }

	  state (
	    ESTABLISHED RELATED
	 ) ACCEPT;

	 # default
    	  limit 2/s logprefix "LANIN DROP ICMP " LOG;
    	 REJECT;

	}
	
	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain LANOUT_icmp {
        proto icmp {
	  limit 10/s icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded               
	 ) ACCEPT;

	 # default
    	  limit 2/s logprefix "LANOUT REJECT ICMP " LOG;
    	 REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }




# chain level 2
    chain LOIN_tcp {
	proto tcp {
	    #	saddr (
	    #	 bad.guy1.com bad.hacker.org
	    #	) REJECT;

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	     state INVALID REJECT reject-with icmp-host-prohibited;

	     state NEW {

		# tns_listener/1521 ntop/666 32768:61000 for pam_auth (/proc/sys/net/ipv4/ip_local_port_range)
	    	dport (
		 ftp telnet smtp time http pop3 auth https 666 swat 1521 3128 dqs_qmaster	32768:61000
	    	) sport 1024: syn {
			limit 10/sec burst 20 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "Loopback SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
			}

	    	dport ssh sport (
	    	 513:1023 1024:
	    	)  syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "Loopback SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
			}

	    	dport domain sport (
	    	 domain 1024:
	    	)  syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "Loopback SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
			}

	    	dport netbios-ssn sport (
	    	 netbios-ssn 1024:
	    	) syn {
			limit 1/sec burst 2 goto TCPACCEPT;
			limit 1/sec burst 2 log-level warn logprefix "Loopback SYN attack " LOG;
			limit 9999 burst 9999 REJECT;     # ugly way to "disable" limit
			}

	    }

	   # default
    	    limit 2/s logprefix "LOIN REJECT TCP " LOG;
    	   REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain LOOUT_tcp {

	proto tcp {

	    state INVALID REJECT;

	    state (
	    ESTABLISHED RELATED
	   ) ACCEPT;

	   # Only User Arjan may access this ntop/666 swat/901
	    dport (
		666 swat
	    	) sport 1024: {
			 {
				uid-owner arjan state NEW syn goto TCPACCEPT;
				uid-owner arjan state ESTABLISHED ACCEPT;
			}
			 uid-owner arjan REJECT;
#			 uid-owner root rst ACCEPT;
			logprefix "INETOUT Invalid User " LOG;
			REJECT reject-with icmp-port-unreachable;
	    }

	    # Only User squid may go to 5 local pam_auth processes (/etc/squid.conf) 32768:61000 for pam_auth (/proc/sys/net/ipv4/ip_local_port_range)
	    dport (
		32768:61000		# !!!!
	    	) sport 1024: {
			 {
				uid-owner squid state NEW syn goto TCPACCEPT;
				uid-owner squid state ESTABLISHED ACCEPT; 
				}
			 uid-owner squid REJECT;
			 uid-owner root tcp-flags (SYN,ACK,RST) (ACK,RST) ACCEPT; 
			 uid-owner root ACCEPT; 
			 uid-owner arjan ACCEPT;
			 pid-owner 1 ACCEPT; 	# Accept init
			log-tcp-options logprefix "INETOUT Invalid User " LOG;
#			REJECT reject-with icmp-host-prohibited;
			REJECT reject-with icmp-port-unreachable;
	    }

	     state NEW {
		# tns_listener/1521
	    	dport (
		 ftp telnet smtp time http auth imap https 1521 3128 dqs_qmaster
	    	) sport 1024: syn goto TCPACCEPT;

	    	dport ssh sport (
	    	 513:1023 1024:
	    	) syn goto TCPACCEPT;

	    	dport domain sport (
	    	 domain 1024:
	    	) syn goto TCPACCEPT;

            	dport netbios-ssn sport (
                 netbios-ssn 1024:
            	) syn goto TCPACCEPT;           
	
		# Allow telnet to local host
	    	dport telnet sport 1024: syn goto TCPACCEPT;

		dport 1024: sport ( ftp ftp-data ) syn goto TCPACCEPT;

	   }


	   # default
    	    limit 2/s logprefix "LOOUT REJECT TCP " LOG;
    	   REJECT;


	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

# chain level 2
    chain LOIN_udp {


	proto udp {

#	    saddr (
#		bad.guy1.com bad.hacker.org
#	    ) REJECT;

  	     state INVALID REJECT;

	    state NEW {

		# Accept SNMP-traps
	    	#dport snmptrap sport 1024: saddr 192.168.0.3 goto UDPACCEPT;

		# Accept syslog
	    	#dport syslog sport syslog saddr 192.168.0.3 goto UDPACCEPT;

	    	sport netbios-ns dport netbios-ns goto UDPACCEPT;
	    	sport netbios-dgm dport netbios-dgm goto UDPACCEPT;

		# Allow incoming DNS requests
	    	dport domain sport ( domain 1024: ) goto UDPACCEPT;
	    }

	     state (
	     ESTABLISHED RELATED
	    ) ACCEPT;

	    # default
    	     limit 2/s logprefix "LOIN REJECT UDP " LOG;
    	    REJECT;

        }


	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;

    }

    chain LOOUT_udp {
	proto udp {
		# Accept known sessions (return traffic)
		 state (
		    ESTABLISHED RELATED
		) ACCEPT;

		 state NEW {
			# Allow DNS/53 outgoing requests
			sport ( 53 1024: ) dport 53 goto UDPACCEPT;

			# Allow "time/37", squid/icpv2 outgoing requests
			proto udp sport ( 1024: ) dport ( time icpv2 ) goto UDPACCEPT;

			# Don't allow biff/512 send out, just drop silently
			proto udp sport ( 1024: ) dport biff DROP;
		}

		# default
    		 limit 2/s logprefix "LOOUT REJECT UDP " LOG;
    		REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

# chain level 2
    chain LOIN_icmp {

        proto icmp {

#	 saddr (
#	    bad.guy1.com bad.hacker.org
#	 ) REJECT;

	  state INVALID REJECT;

	 icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
           time-exceeded               
	 ) {
		 limit 10/s ACCEPT;
		 limit 2/s logprefix "LOIN ICMP rate to high " LOG;
		REJECT;
	   }

	  state (
	    ESTABLISHED RELATED
	 ) ACCEPT;

	 # default
    	  limit 2/s logprefix "LOIN REJECT ICMP " LOG;
    	 REJECT;

	}
	
	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }

    chain LOOUT_icmp {
        proto icmp {
	  limit 10/s icmptype (
	   # Use 'iptables -p icmp -h' for possible options
	   ping # remove if you do not want to be 'seen'
           pong # removing this will cause you not being able
             	# to ping someone else, since the response will
                # will be blocked...
           destination-unreachable
	   host-prohibited	# accept our own generated packets (LREJECT)
	   port-unreachable
           time-exceeded               
	 ) ACCEPT;

	 # default
    	  limit 2/s logprefix "LOOUT REJECT ICMP " LOG;
    	 REJECT;

	}

	# Catch configuration errors
	logprefix "Configuration ERROR (tf) " LOG;
	DROP;
    }


# 2nd level chains
    chain LDROP {
	LOG  limit 10/s {
	    log-level info   {
	        proto tcp logprefix "TCP Dropped (tf) ";
	        proto udp logprefix "UDP Dropped (tf) ";
	        proto icmp logprefix "ICMP Dropped (tf) ";
	    }
	    log-level warn fragment log-prefix "FRAGMENT Dropped (tf) ";
	}
	DROP;
    }

    chain LREJECT {
        LOG  limit 10/s {
            log-level info {
                proto tcp logprefix "TCP Rejected (tf) ";
                proto udp logprefix "UDP Rejected (tf) ";
                proto icmp logprefix "ICMP Rejected (tf) ";
            }
            log-level warn fragment log-prefix "FRAGMENT Rejected (tf) ";
        }
        reject-with icmp-host-prohibited REJECT;

    }

    # Chain which should only be called with syn packets!
    chain OLDTCPACCEPT {
	proto tcp {
	    syn  limit 20/s burst 50 ACCEPT;
	    ! syn   limit 10/s logprefix "SYN mismatch in TCPACCEPT " LOG;
	    ! syn DROP;
	    syn  limit 10/s logprefix "Synflood in TCPACCEPT " LOG;
	    DROP;
	}
	# Should never ever be here, else wrong use of this Chain
	logprefix "Prot. Mismatch in TCPACCEPT " LOG;
	REJECT;
    }

    # Chain which should only be called with syn packets!
    chain TCPACCEPT {
	proto tcp {
	    # Set systemwide connectionrate limit
	    # Use limit per service also!
	    syn  limit 600/minute burst 6000 state NEW ACCEPT;

	    syn  limit 10/s state NEW logprefix "Synflood in TCPACCEPT " LOG;
	    syn  limit 10/s state ! NEW logprefix "unexp. Syn in TCPACCEPT " LOG;
	    ! syn   limit 10/s logprefix "SYN mismatch in TCPACCEPT " LOG;
	    ! syn DROP;
	    DROP;
	}
	# Should never ever be here, else wrong use of this Chain
	logprefix "Prot. Mismatch in TCPACCEPT " LOG;
	REJECT;
    }

    chain UDPACCEPT {
	proto udp ACCEPT;
	# proto udp log ACCEPT;
	logprefix "Mismatch in UDPACCEPT " LOG;
	REJECT;
    }

}


# A NAT/MASQ table
table nat {


# built-in chain

    chain PREROUTING policy DROP {
#	interface ppp0 goto ppp0_IN;
#	interface eth0 goto eth0_IN;
#	interface tunl0 goto tunl0_IN;
#	interface lo ACCEPT;
#	goto LREJECT;

	# Redirect all outgoing SMTP via local MTA
	interface eth0 proto tcp dport 25  REDIRECT to 25;

	# Redirect all outgoing HTTP via local squid
	interface eth0 proto tcp dport 80  REDIRECT to 3128;

	# Redirect all outgoing DNS request via local DNS
	interface eth0 proto tcp dport 53  REDIRECT to 53;
	interface eth0 proto udp dport 53  REDIRECT to 53;


	# Services on LAN available on INET
	interface ppp0 proto tcp dport telnet DNAT to 192.168.0.3:22 ;

    	ACCEPT;
	goto LDROP;
    }

# built-in chain

    chain POSTROUTING policy DROP {

    	outerface ppp0 saddr %MASQUERADED_NWS MASQ;

	ACCEPT;
	goto LDROP;

    }

# built-in chain

    chain OUTPUT policy DROP {

#	outerface ppp0 proto tcp dport 80  REDIRECT 3128;

    	ACCEPT;
	goto LDROP;

    }


# Level 1 chains, user defined

    chain LDROP {
	LOG  limit 10/s {
	    log-level info   {
	        proto tcp logprefix "TCP Dropped (tm) ";
	        proto udp logprefix "UDP Dropped (tm) ";
	        proto icmp logprefix "ICMP Dropped (tm) ";
	    }
	    log-level warn {
		fragment log-prefix "FRAGMENT Dropped (tm) ";
	    }
	}
	DROP;
    }




}

# Mangle table
table mangle {

# built-in chain

    chain PREROUTING policy DROP {
    	ACCEPT;
	goto LDROP;
    }

# built-in chain

    chain OUTPUT policy DROP {

    outerface ppp0 protocol tcp # yes, required by the kernel... it also
#                 # only works for tcp.
#    # this next line creates mirroring rules for the sport:
#    reverse
      {
        # rapid response protocols
        dport (telnet,ssh,ftp) settos min-delay TOS;
        # keep these from timing out
        dport (http,nntp,smtp,domain,pop3,imap) settos max-reliability TOS;
        # bulk stuff
        dport (ftp-data) settos max-throughput TOS;
      }

    outerface ppp0 protocol udp # yes, required by the kernel... it also
#                 # only works for tcp.
#    # this next line creates mirroring rules for the sport:
#    reverse
      {
        # rapid response protocols
        dport (domain) settos min-delay TOS;
        # keep these from timing out
        #dport (http,nntp,smtp,domain) settos max-reliability TOS;
        # bulk stuff
        #dport (ftp-data) settos max-throughput TOS;
      }

         # remove any bits set by clients for different
         # protocols, since they might be tricking their
         # packets into a unfair priority... It wouldn't
         # surprise me if IE uses this... :-O
     settos min-cost TOS;

     ACCEPT;

# Test area
#	 4 settos min-cost TOS;

# Example from ferm perl script:
# sport :1023 tos 4 settos 8 mark 2;
outerface ppp0 protocol tcp tos 4 settos 8 mark 2;




##	mark mark 1 LOG;
#	goto MARK setmark 1 MARK;
#	 mark 1 LOG;
#	MARK setmark 1;
#	 mark 1;

# End Test area


     goto LDROP;
    }



# Level 1 chains, user defined

    chain LDROP {
	LOG  limit 10/s {
	    log-level info   {
	        proto tcp logprefix "TCP Dropped (tm) ";
	        proto udp logprefix "UDP Dropped (tm) ";
	        proto icmp logprefix "ICMP Dropped (tm) ";
	    }
	    log-level warn {
		fragment log-prefix "FRAGMENT Dropped (tm) ";
	    }
	}
	DROP;
    }




# Level 2 chains, user defined

chain tosqueue
## queueing for tcp-traffic, quite good for response on
## a ppp-line (modem), maybe a bad idea for eth...
{
    protocol tcp # yes, required by the kernel... it also
#                 # only works for tcp.
#    # this next line creates mirroring rules for the sport:
#    reverse
    {
#        # rapid response protocols
        dport (ssh,ftp) settos min-delay TOS;
#        # keep these from timing out
        dport (http,nntp,smtp,domain) settos max-reliability TOS;
#        # bulk stuff
        dport (ftp-data) settos max-throughput TOS;
    }
#
#    # remove any bits set by clients for different
#    # protocols, since they might be tricking their
#    # packets into a unfair priority... It wouldn't
#    # surprise me if IE uses this... :-O
    settos min-cost TOS;
}



}

